version: "3.7"
services:
  api:
    build:
      context: "./api"
    networks:
      - ctfnote
    environment:
      CREATE_PAD_URL: "https://${CMD_DOMAIN}/pad/new"
      SHOW_PAD_URL: "/"
      DATABASE_URL: "postgres://ctfnote:ctfnote@db:5432/ctfnote"
      CMD_DB_URL: postgres://ctfnote:ctfnote@db:5432/hedgedoc #should be equal to CMD_DB_URL of the hedgedoc container
    depends_on:
      - db
  db:
    build:
      context: "./db"
    restart: always
    environment:
      POSTGRES_PASSWORD: ctfnote
      POSTGRES_USER: ctfnote
      POSTGRES_MULTIPLE_DATABASES: hedgedoc
    volumes:
      - ctfnote-db:/var/lib/postgresql/data
    networks:
      - ctfnote
  front:
    networks:
      - ctfnote
    build:
      context: "./front"
    depends_on:
      - hedgedoc
    ports:
      - 127.0.0.1:8080:80
  hedgedoc:
    image: quay.io/hedgedoc/hedgedoc:1.9.0-debian
    environment:
      - CMD_DB_URL=postgres://ctfnote:ctfnote@db:5432/hedgedoc
      - CMD_URL_PATH=pad
      - CMD_IMAGE_UPLOAD_TYPE=filesystem
      - CMD_DOMAIN=${CMD_DOMAIN}
      - CMD_PROTOCOL_USESSL=true
      - CMD_URL_ADDPORT=false
      - CMD_ALLOW_ORIGIN="localhost,${CMD_DOMAIN}"

    depends_on:
      - db
    restart: always
    volumes:
      - pad-uploads:/home/hackmd/app/public/uploads
    networks:
      - ctfnote

  vpn:
    # This container will setup an openvpn connection to the challenge infra.
    # We'll proxy any containers that need access to the chals through
    # this network.
    image: dperson/openvpn-client
    # cap_add, security_opt, and volume required for the image to function
    cap_add:
      - net_admin
    networks:
      - default
    dns:
      - 1.1.1.1
      - 1.0.0.1
    tmpfs:
      - /run
      - /tmp
    networks:
      ctfnote:
        aliases:
          - destructivefarm
    security_opt:
      - label:disable
    stdin_open: true
    tty: true
    volumes:
      - /dev/net:/dev/net:z
    # Put .ovpn configuration file in the ./workdir/vpn directory
      - ./workdir/vpn:/vpn
    ports:
      - "127.0.0.1:5000:5000"
    entrypoint:
      - "/sbin/tini"
      - "--"
      - "bash"
      - "-c"
      - "(ls /vpn/*.ovpn || sleep infinity) && /usr/bin/openvpn.sh"

  destructivefarm:
    build:
      context: "./DestructiveFarm"
    restart: always
    environment:
      - SERVER_PASSWORD=${DESCTRUCTIVE_FARM_PASSWORD}
    volumes:
      - destructive_flags:/var/server/
      - ./DestructiveFarm/server/config.py:/opt/server/config.py
    depends_on:
      - vpn
    network_mode: "service:vpn"
    # Overwrite the entrypoint to prevent hosting the farm on all interfaces.
    # Instead, only host on `vpn`, which will resolve to the _INTERNAL_ docker ip address.
    #
    # For example: inet 172.31.0.2/16 brd 172.31.255.255 scope global eth0
    #
    # The farm will be reachable via the following interfaces:
    #  - localhost/TCP/5000 -> only accessible to docker host running this docker compose file.
    #                          (I suspect this is enough for nginx/ctfnote?)
    #
    #  - 172.31.0.2/TCP/5000 -> accessible to the docker host and other containers in this file.
    #
    #
    #  Just to be clear, `vpn` is just a dns name that resolves to a docker-internal IP. This
    #  does not host the web server to the CTF network.
    entrypoint: ["/opt/venv/bin/python", "-m", "flask", "run", "--host", "vpn", "--with-threads" ]

volumes:
  ctfnote-db:
  pad-uploads:
  destructive_flags:
networks:
  ctfnote:
